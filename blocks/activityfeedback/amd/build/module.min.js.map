{"version":3,"sources":["../src/module.js"],"names":["init","args","addDocumentEventListeners","rootPath","rootpath","courseId","parseInt","courseid","displayFeedback","document","addEventListener","event","visiblePopover","querySelector","contains","target","feedbacks","querySelectorAll","isInside","container","classList","remove","which","key","code","keyCode","Ajax","call","methodname","done","pixData","window","console","log","activities","getElementsByClassName","activity","activityInstance","courseModuleId","id","substring","createElement","className","setAttribute","imgMain","src","alt","openFeedbackOptions","popover","num","figureOpt","length","name","setFeedbackOption","imgOpt","url","figCaptOpt","textContent","append","appendChild","getFeedback","fail","notification","exception","mainImg","nextElementSibling","add","fbData","mainImgUpdated","fbItem","cmid","firstElementChild","figOptions","opt","getAttribute","fbid","getFeedbackForActivity","btn","parentElement","previousElementSibling","fbname"],"mappings":"gLAWA,OACA,O,gjCAOoB,QAAPA,CAAAA,IAAO,CAACC,CAAD,CAAU,CAC1BC,CAAyB,GADC,GAGpBC,CAAAA,CAAQ,CAAGF,CAAI,CAACG,QAHI,CAIpBC,CAAQ,CAAGC,QAAQ,CAACL,CAAI,CAACM,QAAN,CAJC,CAK1BC,CAAe,CAACL,CAAD,CAAWE,CAAX,CAClB,C,CAQD,QAASH,CAAAA,CAAT,EAAqC,CAGjCO,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAmC,SAASC,CAAT,CAAgB,CAC/C,GAAIC,CAAAA,CAAc,CAAGH,QAAQ,CAACI,aAAT,CAAuB,qCAAvB,CAArB,CAEA,GAAID,CAAc,SAAd,EAAmD,IAAnB,GAAAA,CAAhC,EACG,CAACA,CAAc,CAACE,QAAf,CAAwBH,CAAK,CAACI,MAA9B,CADR,CAC+C,IACvCC,CAAAA,CAAS,CAAGP,QAAQ,CAACQ,gBAAT,CAA0B,yCAA1B,CAD2B,CAEvCC,CAAQ,GAF+B,KAIrBF,CAJqB,QAI3C,2BAAiC,IAAxBG,CAAAA,CAAwB,SAC7B,GAAGA,CAAS,CAACL,QAAV,CAAmBH,CAAK,CAACI,MAAzB,CAAH,CAAqC,CACjCG,CAAQ,GAAR,CACA,KACH,CACJ,CAT0C,+BAU3C,GAAI,CAACA,CAAL,CAAe,CACXN,CAAc,CAACQ,SAAf,CAAyBC,MAAzB,CAAgC,iBAAhC,CACH,CACJ,CACJ,CAlBD,EAqBAZ,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAmC,SAASC,CAAT,CAAgB,CAC/C,GAAoB,EAAhB,GAAAA,CAAK,CAACW,KAAN,EAAoC,QAAd,GAAAX,CAAK,CAACY,GAA5B,EAA+D,QAAf,GAAAZ,CAAK,CAACa,IAAtD,EAA6F,EAAlB,GAAAb,CAAK,CAACc,OAArF,CAAqG,CACjG,GAAIb,CAAAA,CAAc,CAAGH,QAAQ,CAACI,aAAT,CAAuB,qCAAvB,CAArB,CACA,GAAGD,CAAc,SAAd,EAAmD,IAAnB,GAAAA,CAAnC,CAA4D,CACxDA,CAAc,CAACQ,SAAf,CAAyBC,MAAzB,CAAgC,iBAAhC,CACH,CACJ,CACJ,CAPD,CAQH,CAOD,QAASb,CAAAA,CAAT,CAAyBL,CAAzB,CAAmCI,CAAnC,CAA6C,CAEzCmB,UAAKC,IAAL,CAAU,CAAC,CACPC,UAAU,CAAE,qCADL,CAEP3B,IAAI,CAAE,EAFC,CAGP4B,IAAI,CAAE,cAAUC,CAAV,CAAmB,CACrBC,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,6BAAnB,EADqB,GAEfC,CAAAA,CAAU,CAAGzB,QAAQ,CAAC0B,sBAAT,CAAgC,UAAhC,CAFE,KAIED,CAJF,QAIrB,2BAAmC,IAAxBE,CAAAA,CAAwB,SAC3BC,CAAgB,CAAGD,CAAQ,CAACD,sBAAT,CAAgC,kBAAhC,EAAoD,CAApD,CADQ,CAG/B,GAAIE,CAAgB,SAAhB,EAAuD,IAArB,GAAAA,CAAtC,CAAiE,IACvDC,CAAAA,CAAc,CAAIF,CAAQ,CAACG,EAAV,CAAcC,SAAd,CAAwB,CAAxB,CADsC,CAEzDrB,CAAS,CAAGV,QAAQ,CAACgC,aAAT,CAAuB,QAAvB,CAF6C,CAG7DtB,CAAS,CAACuB,SAAV,CAAsB,kCAAtB,CACAvB,CAAS,CAACwB,YAAV,CAAuB,WAAvB,CAAoCL,CAApC,EAGA,GAAIM,CAAAA,CAAO,CAAGnC,QAAQ,CAACgC,aAAT,CAAuB,KAAvB,CAAd,CACAG,CAAO,CAACF,SAAR,CAAoB,iCAApB,CACAE,CAAO,CAACC,GAAR,CAAc1C,CAAQ,CAAG,2CAAzB,CACAyC,CAAO,CAACE,GAAR,CAAc,UAAd,CACAF,CAAO,CAACD,YAAR,CAAqB,WAArB,CAAkCL,CAAlC,EACAM,CAAO,CAAClC,gBAAR,CAAyB,OAAzB,CAAkC,UAAY,CAC1CqC,CAAmB,CAAC,IAAD,CACtB,CAFD,EAIA,GAAIC,CAAAA,CAAO,CAAGvC,QAAQ,CAACgC,aAAT,CAAuB,KAAvB,CAAd,CAEAO,CAAO,CAACN,SAAR,CAAoB,iBAApB,CAIA,IAAK,GAAIO,CAAAA,CAAG,CAAG,CAAV,CACGC,CADR,CAAyB,CAAP,EAAAD,CAAG,EAASA,CAAG,EAAInB,CAAO,CAACqB,MAA7C,CAAqDF,CAAG,EAAxD,CAA4D,CACpDC,CADoD,CACxCzC,QAAQ,CAACgC,aAAT,CAAuB,QAAvB,CADwC,CAExDS,CAAS,CAACR,SAAV,CAAsB,+BAAtB,CACAQ,CAAS,CAACP,YAAV,CAAuB,WAAvB,CAAoCL,CAApC,EACAY,CAAS,CAACP,YAAV,CAAuB,WAAvB,CAAoCb,CAAO,CAACmB,CAAG,CAAG,CAAP,CAAP,CAAiB1B,GAArD,EACA2B,CAAS,CAACP,YAAV,CAAuB,aAAvB,CAAsCb,CAAO,CAACmB,CAAG,CAAG,CAAP,CAAP,CAAiBG,IAAvD,EACAF,CAAS,CAACxC,gBAAV,CAA2B,OAA3B,CAAoC,UAAY,CAC5C2C,CAAiB,CAAC,IAAD,CAAOlD,CAAP,CACpB,CAFD,EAIA,GAAImD,CAAAA,CAAM,CAAG7C,QAAQ,CAACgC,aAAT,CAAuB,KAAvB,CAAb,CACAa,CAAM,CAACZ,SAAP,CAAmB,4BAAnB,CACAY,CAAM,CAACT,GAAP,CAAaf,CAAO,CAACmB,CAAG,CAAG,CAAP,CAAP,CAAiBM,GAA9B,CACAD,CAAM,CAACR,GAAP,CAAahB,CAAO,CAACmB,CAAG,CAAG,CAAP,CAAP,CAAiBG,IAA9B,CAEA,GAAII,CAAAA,CAAU,CAAG/C,QAAQ,CAACgC,aAAT,CAAuB,YAAvB,CAAjB,CACAe,CAAU,CAACC,WAAX,CAAyB3B,CAAO,CAACmB,CAAG,CAAG,CAAP,CAAP,CAAiBG,IAA1C,CACAF,CAAS,CAACQ,MAAV,CAAiBJ,CAAjB,CAAyBE,CAAzB,EACAR,CAAO,CAACU,MAAR,CAAeR,CAAf,CACH,CACD/B,CAAS,CAACuC,MAAV,CAAiBd,CAAjB,CAA0BI,CAA1B,EACAX,CAAgB,CAACsB,WAAjB,CAA6BxC,CAA7B,CACH,CACJ,CApDoB,+BAsDrByC,CAAW,CAACzD,CAAD,CAAWI,CAAX,CACd,CA1DM,CA2DPsD,IAAI,CAAEC,UAAaC,SA3DZ,CAAD,CAAV,CA6DH,CAOD,QAAShB,CAAAA,CAAT,CAA6BiB,CAA7B,CAAsC,CAClC,GAAIhB,CAAAA,CAAO,CAAGgB,CAAO,CAACC,kBAAtB,CAGA,GAAIjB,CAAO,CAAC5B,SAAR,CAAkBN,QAAlB,CAA2B,iBAA3B,CAAJ,CAAmD,CAC/CkC,CAAO,CAAC5B,SAAR,CAAkBC,MAAlB,CAAyB,iBAAzB,CACH,CAFD,IAGK,CAGD,GAAIT,CAAAA,CAAc,CAAGH,QAAQ,CAACI,aAAT,CAAuB,qCAAvB,CAArB,CACA,GAAGD,CAAc,SAAd,EAAmD,IAAnB,GAAAA,CAAnC,CAA4D,CACxDA,CAAc,CAACQ,SAAf,CAAyBC,MAAzB,CAAgC,iBAAhC,CACH,CACD2B,CAAO,CAAC5B,SAAR,CAAkB8C,GAAlB,CAAsB,iBAAtB,CACH,CACJ,CAQD,QAASN,CAAAA,CAAT,CAAqBzD,CAArB,CAA+BI,CAA/B,CAAyC,CAErCmB,UAAKC,IAAL,CAAU,CAAC,CACPC,UAAU,CAAE,0CADL,CAEP3B,IAAI,CAAE,CACFM,QAAQ,CAAEA,CADR,CAFC,CAMPsB,IAAI,CAAE,cAAUsC,CAAV,CAAkB,IAChBC,CAAAA,CAAc,GADE,KAICD,CAJD,QAIpB,2BAA6B,IAAlBE,CAAAA,CAAkB,SAErBlD,CAAS,CAAGV,QAAQ,CAACI,aAAT,+DAA6EwD,CAAM,CAACC,IAApF,QAFS,CAGzB,GAAInD,CAAS,SAAT,EAAyC,IAAd,GAAAA,CAA/B,CAAmD,IAC3C6C,CAAAA,CAAO,CAAG7C,CAAS,CAACoD,iBADuB,CAE3CC,CAAU,CAAGrD,CAAS,CAACF,gBAAV,CAA2B,sCAA3B,CAF8B,KAI/BuD,CAJ+B,QAI/C,2BAA4B,IAAnBC,CAAAA,CAAmB,SACxB,GAAIA,CAAG,CAACC,YAAJ,CAAiB,WAAjB,GAAiCL,CAAM,CAACM,IAA5C,CAAkD,CAC9CX,CAAO,CAACnB,GAAR,CAAc4B,CAAG,CAACF,iBAAJ,CAAsBG,YAAtB,CAAmC,KAAnC,CAAd,CACAN,CAAc,GAAd,CACAK,CAAG,CAACrD,SAAJ,CAAcC,MAAd,CAAqB,qCAArB,EACAoD,CAAG,CAACrD,SAAJ,CAAc8C,GAAd,CAAkB,iCAAlB,CACH,CALD,IAMK,CACDnC,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,WAAnB,EACAwC,CAAG,CAACrD,SAAJ,CAAcC,MAAd,CAAqB,iCAArB,EACAoD,CAAG,CAACrD,SAAJ,CAAc8C,GAAd,CAAkB,qCAAlB,CACH,CACJ,CAhB8C,+BAiB/C,GAAI,CAACE,CAAL,CAAqB,CACjBJ,CAAO,CAACnB,GAAR,CAAc1C,CAAQ,CAAG,2CAAzB,CACAiE,CAAc,GACjB,CACJ,CACJ,CA7BmB,+BA8BvB,CApCM,CAqCPP,IAAI,CAAEC,UAAaC,SArCZ,CAAD,CAAV,CAuCH,CAUD,QAASa,CAAAA,CAAT,CAAgCzE,CAAhC,CAA0CmE,CAA1C,CAAgD,CAE5C5C,UAAKC,IAAL,CAAU,CAAC,CACPC,UAAU,CAAE,8CADL,CAEP3B,IAAI,CAAE,CACFqE,IAAI,CAAEA,CADJ,CAFC,CAMPzC,IAAI,CAAE,cAAUsC,CAAV,CAAkB,IAChBC,CAAAA,CAAc,GADE,CAEhBC,CAAM,CAAGF,CAAM,CAAC,CAAD,CAFC,CAGhBhD,CAAS,CAAGV,QAAQ,CAACI,aAAT,+DAA6EyD,CAA7E,QAHI,CAKpB,GAAInD,CAAS,SAAT,EAAyC,IAAd,GAAAA,CAA/B,CAAmD,IAC3C6C,CAAAA,CAAO,CAAG7C,CAAS,CAACoD,iBADuB,CAE3CC,CAAU,CAAGrD,CAAS,CAACF,gBAAV,CAA2B,sCAA3B,CAF8B,KAI/BuD,CAJ+B,QAI/C,2BAA4B,IAAnBC,CAAAA,CAAmB,SACxB,GAAIJ,CAAM,SAAN,EAAmC,IAAX,GAAAA,CAA5B,CAA6C,CACzCI,CAAG,CAACrD,SAAJ,CAAcC,MAAd,CAAqB,iCAArB,EACAoD,CAAG,CAACrD,SAAJ,CAAcC,MAAd,CAAqB,qCAArB,CACH,CAHD,IAIK,IAAIoD,CAAG,CAACC,YAAJ,CAAiB,WAAjB,GAAiCL,CAAM,CAACM,IAA5C,CAAkD,CACnDX,CAAO,CAACnB,GAAR,CAAc4B,CAAG,CAACF,iBAAJ,CAAsBG,YAAtB,CAAmC,KAAnC,CAAd,CACAN,CAAc,GAAd,CACAK,CAAG,CAACrD,SAAJ,CAAcC,MAAd,CAAqB,qCAArB,EACAoD,CAAG,CAACrD,SAAJ,CAAc8C,GAAd,CAAkB,iCAAlB,CACH,CALI,IAMA,CACDO,CAAG,CAACrD,SAAJ,CAAcC,MAAd,CAAqB,iCAArB,EACAoD,CAAG,CAACrD,SAAJ,CAAc8C,GAAd,CAAkB,qCAAlB,CACH,CACJ,CAnB8C,+BAoB/C,GAAI,CAACE,CAAL,CAAqB,CACjBJ,CAAO,CAACnB,GAAR,CAAc1C,CAAQ,CAAG,2CAAzB,CACAiE,CAAc,GACjB,CACJ,CACDrC,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,iCAAnB,CACH,CArCM,CAsCP4B,IAAI,CAAEC,UAAaC,SAtCZ,CAAD,CAAV,CAwCH,CAQD,QAASV,CAAAA,CAAT,CAA2BwB,CAA3B,CAAgC1E,CAAhC,CAA0C,CAEtC,GAAI6C,CAAAA,CAAO,CAAG6B,CAAG,CAACC,aAAlB,CACA9B,CAAO,CAAC5B,SAAR,CAAkBC,MAAlB,CAAyB,iBAAzB,EACA,GAAI2C,CAAAA,CAAO,CAAGhB,CAAO,CAAC+B,sBAAtB,CAKA,GAAIF,CAAG,CAACzD,SAAJ,CAAcN,QAAd,CAAuB,iCAAvB,CAAJ,CAA+D,CAC3DkD,CAAO,CAACnB,GAAR,CAAc1C,CAAQ,CAAG,2CAAzB,CACA0E,CAAG,CAACzD,SAAJ,CAAcC,MAAd,CAAqB,iCAArB,CACH,CAHD,IAKK,CACD2C,CAAO,CAACnB,GAAR,CAAcgC,CAAG,CAACN,iBAAJ,CAAsBG,YAAtB,CAAmC,KAAnC,CAAd,CACAG,CAAG,CAACzD,SAAJ,CAAc8C,GAAd,CAAkB,iCAAlB,CACH,CAjBqC,GAmBhCI,CAAAA,CAAI,CAAGO,CAAG,CAACH,YAAJ,CAAiB,WAAjB,CAnByB,CAoBhCC,CAAI,CAAGE,CAAG,CAACH,YAAJ,CAAiB,WAAjB,CApByB,CAqBhCM,CAAM,CAAGH,CAAG,CAACH,YAAJ,CAAiB,aAAjB,CArBuB,CAwBtChD,UAAKC,IAAL,CAAU,CAAC,CACPC,UAAU,CAAE,0CADL,CAEP3B,IAAI,CAAE,CACFqE,IAAI,CAAEA,CADJ,CAEFK,IAAI,CAAEA,CAFJ,CAGFK,MAAM,CAAEA,CAHN,CAFC,CAOPnD,IAAI,CAAE,eAAY,CAEd+C,CAAsB,CAACzE,CAAD,CAAWmE,CAAX,CAAtB,CACAvC,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,qBAAnB,CACH,CAXM,CAYP4B,IAAI,CAAEC,UAAaC,SAZZ,CAAD,CAAV,CAcH,C","sourcesContent":["//Creates feedback options on each activity\n//and handles it by AJAX calls to the webservices.\n//----------------------------------------------------------------------------------------------------------------------------------\n//Must always be compiled by Babel JS with Grunt, see ..\\build\\module.min.js\n//see: https://docs.moodle.org/dev/Javascript_Modules\n//only functions which are exported will be callable from outside the module\n//if the size of the params array is too large (> 1Kb), this will produce a developer warning.\n//Do not attempt to pass large amounts of data through this function, it will pollute the page size.\n//A preferred approach is to pass css selectors for DOM elements that contain data-attributes for any required data,\n//or fetch data via ajax in the background.\n//see: https://docs.moodle.org/dev/AJAX\nimport Ajax from 'core/ajax';\nimport notification from 'core/notification';\n\n/**\n * Initialize feedback.\n * Only function which is callable from outside by PHP.\n * @param args associative array with roopath, courseid\n */\nexport const init = (args) => {\n    addDocumentEventListeners();\n\n    const rootPath = args.rootpath;\n    const courseId = parseInt(args.courseid);\n    displayFeedback(rootPath, courseId);\n};\n\n/**\n * Add necessary event listeners to document.\n * Hide popover\n * - if there was a click outside\n * - if 'esc' was pressed\n */\nfunction addDocumentEventListeners() {\n    //hide popover if click is outside the popover and the main feedback image\n    //https://stackoverflow.com/questions/152975/how-do-i-detect-a-click-outside-an-element\n    document.addEventListener(\"click\", function(event) {\n        let visiblePopover = document.querySelector(\"div.popover_content.popover_visible\");\n        // if visible popover exists and click was outside\n        if (visiblePopover !== undefined && visiblePopover !== null\n            && !visiblePopover.contains(event.target)) {\n            let feedbacks = document.querySelectorAll(\"figure.block_activityfeedback_container\");\n            let isInside = false;\n            // if click was inside a feedback container, don't set popover invisible\n            for (let container of feedbacks) {\n                if(container.contains(event.target)) {\n                    isInside = true;\n                    break;\n                }\n            }\n            if (!isInside) { // click was outside popover and feedback container\n                visiblePopover.classList.remove(\"popover_visible\");\n            }\n        }\n    });\n\n    //close visible popover if escape is pressed\n    document.addEventListener(\"keyup\", function(event) {\n        if (event.which === 27 || event.key === \"Escape\" || event.code === \"Escape\" || event.keyCode === 27) {\n            let visiblePopover = document.querySelector(\"div.popover_content.popover_visible\");\n            if(visiblePopover !== undefined && visiblePopover !== null) {\n                visiblePopover.classList.remove(\"popover_visible\");\n            }\n        }\n    });\n}\n\n/**\n * Display feedback options for each activity in given course.\n * @param rootPath root path needed for pix patch\n * @param courseid id of current course\n */\nfunction displayFeedback(rootPath, courseid) {\n    // get correct feedback pictures from backend\n    Ajax.call([{\n        methodname: 'block_activityfeedback_get_pix_data',\n        args: {},\n        done: function (pixData) {\n            window.console.log(\"displayPictures: start done\");\n            const activities = document.getElementsByClassName(\"activity\");\n            //add feedback elements for each activity\n            for (const activity of activities) {\n                let activityInstance = activity.getElementsByClassName(\"activityinstance\")[0];\n                //check if exists because e.g. activity 'label' has no <div> child element with class 'activityinstance'\n                if (activityInstance !== undefined && activityInstance !== null) {\n                    const courseModuleId = (activity.id).substring(7); //extract xx from id=module-xx\n                    let container = document.createElement(\"figure\");\n                    container.className = \"block_activityfeedback_container\";\n                    container.setAttribute(\"data-cmid\", courseModuleId);\n                    // create main image to open feedback options\n                    // (= neutral clickable image which is shown before any feedback option is displayed/chosen)\n                    let imgMain = document.createElement(\"img\");\n                    imgMain.className = \"block_activityfeedback_img_main\";\n                    imgMain.src = rootPath + \"/blocks/activityfeedback/pix/feedback.png\";\n                    imgMain.alt = \"feedback\";\n                    imgMain.setAttribute(\"data-cmid\", courseModuleId);\n                    imgMain.addEventListener(\"click\", function () {\n                        openFeedbackOptions(this);\n                    });\n\n                    let popover = document.createElement(\"div\");\n                    // automatically defined as inline-block under activityinstance\n                    popover.className = \"popover_content\";\n\n                    //create figure element (with img and figcaption) for each feedback option\n                    //there are 1 to max. 7 options, max. number of elements is given by length of pixData array\n                    for (let num = 1; num <= 7 && num <= pixData.length; num++) {\n                        let figureOpt = document.createElement(\"figure\");\n                        figureOpt.className = \"block_activityfeedback_figopt\";\n                        figureOpt.setAttribute(\"data-cmid\", courseModuleId);\n                        figureOpt.setAttribute(\"data-fbid\", pixData[num - 1].key);\n                        figureOpt.setAttribute(\"data-fbname\", pixData[num - 1].name);\n                        figureOpt.addEventListener(\"click\", function () {\n                            setFeedbackOption(this, rootPath);\n                        });\n\n                        let imgOpt = document.createElement(\"img\");\n                        imgOpt.className = \"block_activityfeedback_img\";\n                        imgOpt.src = pixData[num - 1].url;\n                        imgOpt.alt = pixData[num - 1].name;\n\n                        let figCaptOpt = document.createElement(\"figcaption\");\n                        figCaptOpt.textContent = pixData[num - 1].name;\n                        figureOpt.append(imgOpt, figCaptOpt);\n                        popover.append(figureOpt);\n                    }\n                    container.append(imgMain, popover);\n                    activityInstance.appendChild(container);\n                }\n            }\n            // update the displayed feedback\n            getFeedback(rootPath, courseid);\n        },\n        fail: notification.exception\n    }]);\n}\n\n/**\n * Display feedback options (popover),\n * is called by a click on a main feedback image.\n * @param mainImg neutral main feedback image which was clicked\n */\nfunction openFeedbackOptions(mainImg) {\n    let popover = mainImg.nextElementSibling;\n\n    //toggle visibility of popover (set invisible if it's visible and vice versa)\n    if (popover.classList.contains(\"popover_visible\")) {\n        popover.classList.remove(\"popover_visible\");\n    }\n    else {\n        //first set another possibly visible popover to invisible\n        //because there should never be more than one popover visible at the same time\n        let visiblePopover = document.querySelector(\"div.popover_content.popover_visible\");\n        if(visiblePopover !== undefined && visiblePopover !== null) {\n            visiblePopover.classList.remove(\"popover_visible\");\n        }\n        popover.classList.add(\"popover_visible\");\n    }\n}\n\n/**\n * Get existing feedback from server for given course and user\n * and display already selected/saved feedback options.\n * @param rootPath root path needed for pix path\n * @param courseid id of current course\n */\nfunction getFeedback(rootPath, courseid) {\n    //get feedback for current course and user from backend\n    Ajax.call([{\n        methodname: 'block_activityfeedback_get_feedback_data',\n        args: {\n            courseid: courseid\n            //userid is checked serverside, better for security reasons\n        },\n        done: function (fbData) {\n            let mainImgUpdated = false;\n\n            // select correct image for each returned feedback item\n            for (const fbItem of fbData) {\n                //get feedback container for activity (course_modules_id) of returned feedback\n                let container = document.querySelector(`figure.block_activityfeedback_container[data-cmid=\"${fbItem.cmid}\"]`);\n                if (container !== undefined && container !== null) { //needed if course_module was deleted\n                    let mainImg = container.firstElementChild;\n                    let figOptions = container.querySelectorAll(\"figure.block_activityfeedback_figopt\");\n\n                    for (let opt of figOptions) {\n                        if (opt.getAttribute(\"data-fbid\") == fbItem.fbid) { //feedback option was selected\n                            mainImg.src = opt.firstElementChild.getAttribute(\"src\"); //get src as it is, not resolved\n                            mainImgUpdated = true;\n                            opt.classList.remove(\"block_activityfeedback_not_selected\");\n                            opt.classList.add(\"block_activityfeedback_selected\");\n                        }\n                        else { //feedback option was not selected\n                            window.console.log(\"pix false\");\n                            opt.classList.remove(\"block_activityfeedback_selected\");\n                            opt.classList.add(\"block_activityfeedback_not_selected\");\n                        }\n                    }\n                    if (!mainImgUpdated) {\n                        mainImg.src = rootPath + \"/blocks/activityfeedback/pix/feedback.png\";\n                        mainImgUpdated = true;\n                    }\n                }\n            }\n        },\n        fail: notification.exception\n    }]);\n}\n\n/**\n * Get existing feedback from server for a certain activity (and user)\n * and update displayed feedback options (selected / not selected).\n * Is called after feedback option was selected to update the view,\n * which is faster than getting all feedback data (getFeedback()) of the course.\n * @param rootPath root path used for pix path\n * @param cmid course_modules_id, identifies activity\n */\nfunction getFeedbackForActivity(rootPath, cmid) {\n    //get feedback for given activity from backend\n    Ajax.call([{\n        methodname: 'block_activityfeedback_get_feedback_activity',\n        args: {\n            cmid: cmid\n            //userid is checked serverside, better for security reasons\n        },\n        done: function (fbData) {\n            let mainImgUpdated = false;\n            let fbItem = fbData[0]; //should return max. 1 feedback\n            let container = document.querySelector(`figure.block_activityfeedback_container[data-cmid=\"${cmid}\"]`);\n\n            if (container !== undefined && container !== null) { //needed if course_module was deleted\n                let mainImg = container.firstElementChild;\n                let figOptions = container.querySelectorAll(\"figure.block_activityfeedback_figopt\");\n\n                for (let opt of figOptions) {\n                    if (fbItem === undefined || fbItem === null) { //no feedback, if feedback option was deleted\n                        opt.classList.remove(\"block_activityfeedback_selected\");\n                        opt.classList.remove(\"block_activityfeedback_not_selected\");\n                    }\n                    else if (opt.getAttribute(\"data-fbid\") == fbItem.fbid) { //feedback option was selected\n                        mainImg.src = opt.firstElementChild.getAttribute(\"src\"); //get src as it is, not resolved\n                        mainImgUpdated = true;\n                        opt.classList.remove(\"block_activityfeedback_not_selected\");\n                        opt.classList.add(\"block_activityfeedback_selected\");\n                    }\n                    else { //feedback option was not selected\n                        opt.classList.remove(\"block_activityfeedback_selected\");\n                        opt.classList.add(\"block_activityfeedback_not_selected\");\n                    }\n                }\n                if (!mainImgUpdated) {\n                    mainImg.src = rootPath + \"/blocks/activityfeedback/pix/feedback.png\";\n                    mainImgUpdated = true;\n                }\n            }\n            window.console.log(\"getFeedbackForActivity end done\");\n        },\n        fail: notification.exception\n    }]);\n}\n\n/**\n * Save chosen feedback option serverside and update the view.\n * Is called if a feedback option was selected.\n * @param btn figure of selected option\n * @param rootPath root path used for pix path\n */\nfunction setFeedbackOption(btn, rootPath) {\n    //popover shoudn't be visible anymore if feedback option was selected\n    let popover = btn.parentElement;\n    popover.classList.remove(\"popover_visible\");\n    let mainImg = popover.previousElementSibling;\n\n    //Main feedback image should react fast and show correct image directly\n    //therefore we update it before chosen feedback is saved and confirmed by the server.\n    //if option was already selected it means user now has deselected it\n    if (btn.classList.contains(\"block_activityfeedback_selected\")) {\n        mainImg.src = rootPath + \"/blocks/activityfeedback/pix/feedback.png\";\n        btn.classList.remove(\"block_activityfeedback_selected\");\n    }\n    //user has chosen a new or another feedback option\n    else {\n        mainImg.src = btn.firstElementChild.getAttribute(\"src\");\n        btn.classList.add(\"block_activityfeedback_selected\");\n    }\n\n    const cmid = btn.getAttribute(\"data-cmid\");\n    const fbid = btn.getAttribute(\"data-fbid\");\n    const fbname = btn.getAttribute(\"data-fbname\");\n\n    //send selected feedback to server for storing in the database\n    Ajax.call([{\n        methodname: 'block_activityfeedback_set_feedback_data',\n        args: {\n            cmid: cmid,\n            fbid: fbid,\n            fbname: fbname\n        },\n        done: function () {\n            //reload feedback for current activity\n            getFeedbackForActivity(rootPath, cmid);\n            window.console.log(\"setFeedbackOption 3\");\n        },\n        fail: notification.exception\n    }]);\n}"],"file":"module.min.js"}